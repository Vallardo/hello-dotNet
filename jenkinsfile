pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'us-west-2'  // Set your AWS region here
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Build the dotNet app') {
            steps {
                echo 'Building...'
                bat 'dotnet build' //Commands for the build process
            }
        }

        stage('Build Docker image') {
            steps {
                echo 'Building Docker image...'
                bat 'docker build -t basicdotnetapi .' //"basicdotnetapi" is the name of my app
            }
        }

        stage('Authenticate with AWS ECR'){
            steps{
                echo 'Authenticating with AWS ECR...'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'vj-aws-dev-creds']]) { 
                    script {
                        // AWS Access Key and Secret are available as environment variables
                        bat 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 177555066587.dkr.ecr.us-west-2.amazonaws.com'
                        // Run AWS CLI or any other commands using the AWS credentials
                        
                        
                    }
                }
            }
                //apparently there is another way to get credentials from the jenkings agent (I dont know how to yet)
                //This next line reads SECRET and ACCESS Keys from my local .aws/credentials
            //    bat 'set'
            //    bat 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 177555066587.dkr.ecr.us-west-2.amazonaws.com'
            //}

        }

        stage('Tag the image') {
            steps {
                echo 'Tagging the image...'
                //Tha tag given to this image is "latest" but it could be anything like 1.0 etc..
                bat 'docker tag basicdotnetapi:latest 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        stage('Push the image to Amazon Elastic Container Registry (ECR)') {
            steps {
                echo 'Pushing the image to Amazon Elastic Container Registry (ECR)...'
                bat 'docker push 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        /*stage('Launch EC2 Instance') {
            steps {
                script {
                    // Define the AMI ID, Instance Type, Security Group ID, Subnet ID, and Key Pair
                    //def amiId = 'ami-075686beab831bb7f'  //ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-20250305
                    def amiId = 'ami-087f352c165340ea1'    //Amazon Linux 2023 AMI 2023.7.20250331.0 x86_64 HVM kernel-6.1 
                    def instanceType = 't2.micro'        // Replace with your desired instance type
                    session manager is the recommended way to authenticate, so no keyName is required, a flag saying no-key is require
                    //def keyName = 'vallardo_ec2'            // Replace with your EC2 Key Pair  //not used in real project
                    def securityGroupId = 'sg-0abcd1234efgh5678'  // Replace with your Security Group ID
                    def subnetId = 'subnet-12345abcde67890fg'     // Replace with your Subnet ID
                    def tagName = 'MyEC2Instance'         // Name tag for the instance

                    // Launch EC2 Instance using AWS CLI command
                    bat """
                        aws ec2 run-instances \
                            --image-id ${amiId} \
                            --count 1 \
                            --instance-type ${instanceType} \
                            --key-name ${keyName} \optional
                            --security-group-ids ${securityGroupId} \
                            --subnet-id ${subnetId} \
                            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${tagName}}]' \
                            --output json
                    """
                }
            }
        }
        
        stage('Describe EC2 Instance') {
            steps {
                script {
                    // Get the instance ID of the launched instance
                    //def instanceId = sh(script: "aws ec2 describe-instances --query 'Reservations[0].Instances[0].InstanceId' --output text", returnStdout: true).trim()
                    echo "Launched EC2 instance with ID: ${instanceId}"
                }
            }
        }*/
        
        stage('Connect to EC2 via SSH'){
            steps{
                echo 'Connecting to EC2 via ssh...'
                //where do ec2.pem is stored typically? in this case in in my local box in a random location
                //DO I NEED THE .PEM FILE AT ALL? HOW CAN I USE THE ROLE?
                bat 'ssh -i "../../vallardo_ec2.pem" ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com'
            }
        }

        stage('Install Docker on the EC2 instance'){
            steps{
                echo 'Installing Docker in EC2...'
                bat 'sudo yum update -y'
                bat 'sudo yum install -y docker'
                bat 'sudo service docker start'
                bat 'sudo usermod -aG docker ec2-user'
                bat 'docker --version'
            }
        }

        stage('Pull the Docker image from ECR'){
            steps{
                echo 'Pulling docker image from ECR ...'
                //This steps assumes that the EC2 instance has a role assigned with permissions to log in to AWS ECR
                bat 'aws ecr get-login-password --region us-west-2 | sudo docker login --username AWS --password-stdin 177555066587.dkr.ecr.us-west-2.amazonaws.com'
                bat 'sudo docker pull 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        stage('Run the Docker container'){
            steps{
                echo 'Running the Docker container...'
                bat 'sudo docker run -d -p 80:8080 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }
    }
}
