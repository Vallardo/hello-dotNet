pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'us-west-2'  // Set your AWS region here
        // Explicitly define the known hosts file location
        SSH_KNOWN_HOSTS = "${env.WORKSPACE}\\.ssh\\known_hosts"
    }

    options {
      timeout(time: 5, unit: 'MINUTES') 
  }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Build the dotNet app') {
            steps {
                echo 'Building...'
                bat 'dotnet build' //Commands for the build process
            }
        }

        stage('Build Docker image') {
            steps {
                echo 'Building Docker image...'
                bat 'docker build -t basicdotnetapi .' //"basicdotnetapi" is the name of my app
            }
        }

        stage('Authenticate with AWS ECR'){

            steps{
                echo 'Authenticating with AWS ECR...'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'vj-aws-dev-creds']]) {
                    script {
                        bat 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 177555066587.dkr.ecr.us-west-2.amazonaws.com'
                    }
                }
                
            }
            
        }

        stage('Tag the image') {
            steps {
                echo 'Tagging the image...'
                //Tha tag given to this image is "latest" but it could be anything like 1.0 etc..
                bat 'docker tag basicdotnetapi:latest 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        stage('Push the image to Amazon Elastic Container Registry (ECR)') {
            steps {
                echo 'Pushing the image to Amazon Elastic Container Registry (ECR)...'
                bat 'docker push 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        stage('Connect to EC2 via SSH'){
            steps{
                //withCredentials([sshUserPrivateKey(credentialsId: 'vj_aws_ec2_ssh', keyFileVariable: 'PK')]) {
                //    bat "if not exist ${SSH_KNOWN_HOSTS} mkdir ${SSH_KNOWN_HOSTS}"
                    //bat "ssh-keyscan -t rsa,dsa ec2-44-245-155-98.us-west-2.compute.amazonaws.com >> ${SSH_KNOWN_HOSTS}\\.ssh\\known_hosts"
                    //sh 'git -c core.sshCommand="ssh -i $PK" submodule update --init'
                    //bat "ssh -vv -i \"${pemFilePath}\" -T ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com \"uptime\""
                //    bat """
                //    set
                //    whoami
                //    echo %USERDOMAIN%\\%USERNAME%
                //    icacls ${PK} /inheritance:r
                //    icacls ${PK} /grant:r \"%USERDOMAIN%\\%USERNAME%\":\"(R)\""""

                //    bat "ssh -vv -o StrictHostKeychecking=no -i ${PK} -T ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com \"uptime\""
                //}

                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'vj-aws-dev-creds']]) {
                    script{
                        echo 'Connecting to EC2 via ssh...'
                        def secretValue = bat(script: '''aws secretsmanager get-secret-value --secret-id vallardo-plain-ec2-pem --query SecretString --output text''', returnStdout: true).trim()
                        // Write the PEM content to a file in the workspace
                        //Note: Jenkins does not allow writting files with .pem extension 
                        echo secretValue
                        def pemFilePath = "${env.WORKSPACE}\\vallardo-plain-ec2-pem"

                        writeFile file: pemFilePath, text: secretValue
                        

                        // Debug: Confirm the file is created
                //        echo "PEM file written to: ${pemFilePath}"
                        //bat "powershell Set-ItemProperty -Path \"${pemFilePath}\" -Name \"IsReadOnly\" -Value $true"
                        //bat 'ssh -i "vallardo-pem" -T ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com "uptime"'
                        //bat "ssh -vv -i \"${pemFilePath}\" -T ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com \"uptime\""
                //        echo 'ABout to call SSH'
                        //bat '''
                        //            REM Create the .ssh directory if it does not exist
                        //            if not exist %USERPROFILE%\\.ssh mkdir %USERPROFILE%\\.ssh
                        //            
                        //            REM Add the server's SSH keys to the known_hosts file
                        //            ssh-keyscan -t rsa,dsa ec2-44-245-155-98.us-west-2.compute.amazonaws.com >> %USERPROFILE%\\.ssh\\known_hosts
                        //        '''
                        //bat "ssh -vv -i \"${pemFilePath}\" -T ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com \"uptime\""
                        //sshagent(credentials: ['vj_aws_ec2_ssh']) {
                        //    script {
                        //        echo 'ABout to call SSH'
                                
                                
                                /*bat '''
                                    REM Create the .ssh directory if it does not exist
                                    if not exist %USERPROFILE%\\.ssh mkdir %USERPROFILE%\\.ssh
                                    
                                    REM Add the server's SSH keys to the known_hosts file
                                    ssh-keyscan -t rsa,dsa ec2-44-245-155-98.us-west-2.compute.amazonaws.com >> %USERPROFILE%\\.ssh\\known_hosts
                                    
                                    REM Run the SSH command to the EC2 instance
                                    ssh -o StrictHostKeyChecking=no ec2-user@ec2-44-245-155-98.us-west-2.compute.amazonaws.com "hostname"
                                '''*/
                        //    }
                    }
                }
                
                
            }
        }

        stage('Install Docker on the EC2 instance'){
            steps{
                echo 'Installing Docker in EC2...'
                bat 'sudo yum update -y'
                bat 'sudo yum install -y docker'
                bat 'sudo service docker start'
                bat 'sudo usermod -aG docker ec2-user'
                bat 'docker --version'
            }
        }

        stage('Pull the Docker image from ECR'){
            steps{
                echo 'Pulling docker image from ECR ...'
                //This steps assumes that the EC2 instance has a role assigned with permissions to log in to AWS ECR
                bat 'aws ecr get-login-password --region us-west-2 | sudo docker login --username AWS --password-stdin 177555066587.dkr.ecr.us-west-2.amazonaws.com'
                bat 'sudo docker pull 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }

        stage('Run the Docker container'){
            steps{
                echo 'Running the Docker container...'
                bat 'sudo docker run -d -p 80:8080 177555066587.dkr.ecr.us-west-2.amazonaws.com/vallardo-dotnetapp:latest'
            }
        }
    }
}
